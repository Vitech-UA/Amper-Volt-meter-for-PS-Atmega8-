;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdlib.h>
;#include <mega8.h>
;
;
;
;float current = 0.00;
;float voltage = 0.00;
;
;int adc_buffer_curr = 0;
;int adc_buffer_volt = 0;
;
;
;
;char lcd_buffer_current[20];
;char lcd_buffer_voltage[20];
;
;
;// Declare your global variables here
;
;
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
;
;void init_Timer()
; 0000 001B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001C 	// Timer/Counter 1 initialization
; 0000 001D 	// Clock source: System Clock
; 0000 001E 	// Clock value: 7,813 kHz
; 0000 001F 	// Mode: Normal top=0xFFFF
; 0000 0020 	// OC1A output: Disconnected
; 0000 0021 	// OC1B output: Disconnected
; 0000 0022 	// Noise Canceler: Off
; 0000 0023 	// Input Capture on Falling Edge
; 0000 0024 	// Timer Period: 8,3886 s
; 0000 0025 	// Timer1 Overflow Interrupt: Off
; 0000 0026 	// Input Capture Interrupt: Off
; 0000 0027 	// Compare A Match Interrupt: On
; 0000 0028 	// Compare B Match Interrupt: Off
; 0000 0029 	TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 002A 	TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (1 << CS12) | (0 << CS11) | (1 << CS10);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 002B 	TCNT1H = 0x00;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002C 	TCNT1L = 0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002D 	ICR1H = 0x00;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002E 	ICR1L = 0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002F 	OCR1AH = 0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0030 	OCR1AL = 0xD0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0031 	OCR1BH = 0x00;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0032 	OCR1BL = 0x00;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0033 
; 0000 0034 
; 0000 0035 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 0038 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0039 	//lcd_clear();
; 0000 003A 	ftoa(voltage, 1, lcd_buffer_voltage);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003B 	lcd_gotoxy(0, 0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 003C 	lcd_puts("U= ");
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003D 	lcd_gotoxy(3, 0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003E 	lcd_puts(lcd_buffer_voltage);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003F 
; 0000 0040 
; 0000 0041 	ftoa(current, 2, lcd_buffer_current);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0042 	lcd_gotoxy(0, 1);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0043 	lcd_puts("I=");
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0044 	lcd_gotoxy(3, 1);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0045 	lcd_puts(lcd_buffer_current);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0046 
; 0000 0047 
; 0000 0048 
; 0000 0049 
; 0000 004A 	current = 0.00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 004B 	voltage = 0.00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 004C 
; 0000 004D 	TCNT1H = 0;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004E 	TCNT1L = 0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004F }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0

	.DSEG
_0x3:
	.BYTE 0x7
;
;void init_ADC()
; 0000 0052 {

	.CSEG
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0053 
; 0000 0054 	ADMUX = ADC_VREF_TYPE;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0055 	ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADFR) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS ...
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0056 	SFIOR = (0 << ACME);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0057 
; 0000 0058 
; 0000 0059 }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;void init_port()
; 0000 005B {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005C 	DDRB = (1 << DDB7) | (1 << DDB6) | (1 << DDB5) | (1 << DDB4) | (1 << DDB3) | (1 << DDB2) | (1 << DDB1) | (1 << DDB0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 005D 	PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1) | ...
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 005E 
; 0000 005F 	DDRC = (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (0 << DDC1) | (0 << DDC0);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0060 	PORTC = (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1) | (0 << PORTC0);
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0061 
; 0000 0062 	DDRD = (1 << DDD7) | (1 << DDD6) | (1 << DDD5) | (1 << DDD4) | (1 << DDD3) | (1 << DDD2) | (1 << DDD1) | (1 << DDD0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0063 	PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1) | ...
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0064 }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 0067 {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0068 	ADMUX = adc_input | ADC_VREF_TYPE;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;	adc_input -> R17
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0069 	// Delay needed for the stabilization of the ADC input voltage
; 0000 006A 	delay_us(10);
;PCODE: $00000079 VOL: 0
; 0000 006B 	// Start the AD conversion
; 0000 006C 	ADCSRA |= (1 << ADSC);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 006D 	// Wait for the AD conversion to complete
; 0000 006E 	while ((ADCSRA & (1 << ADIF)) == 0);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006F 	ADCSRA |= (1 << ADIF);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0070 	return ADCH;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0071 }
;PCODE: $00000088 VOL: 0
;
;void main(void)
; 0000 0074 {
;PCODE: $00000089 VOL: 0
; 0000 0075 	TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (1 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << TOIE0);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0076 	MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0077 	UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 << TXB ...
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0078 
; 0000 0079 	init_ADC();
;PCODE: $00000090 VOL: 0
; 0000 007A 	init_port();
;PCODE: $00000091 VOL: 0
; 0000 007B 	init_Timer();
;PCODE: $00000092 VOL: 0
; 0000 007C 	lcd_init(12);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 007D 
; 0000 007E #asm("sei");
;PCODE: $00000095 VOL: 0
; 0000 007F 
; 0000 0080 	while (1)
;PCODE: $00000096 VOL: 0
; 0000 0081 		{
; 0000 0082 
; 0000 0083 		adc_buffer_curr = read_adc(1);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0084 
; 0000 0085 		adc_buffer_volt = read_adc(0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0086 
; 0000 0087 
; 0000 0088 		voltage = (4.97 * 5.00 * adc_buffer_volt) / 256.00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0089 		current = (4.97 * adc_buffer_curr) / 256.00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 008A 
; 0000 008B 
; 0000 008C 
; 0000 008D 
; 0000 008E 
; 0000 008F 		}
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0090 }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
