
AVRASM ver. 2.1.30  D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm Sun Jan 15 15:21:45 2017

D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1093): warning: Register r4 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1094): warning: Register r5 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1095): warning: Register r6 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1096): warning: Register r7 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1097): warning: Register r9 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1098): warning: Register r8 already defined by the .DEF directive
D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1099): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.29 Evaluation
                 ;(C) Copyright 1998-2016 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adc_buffer_curr=R4
                 	.DEF _adc_buffer_curr_msb=R5
                 	.DEF _adc_buffer_volt=R6
                 	.DEF _adc_buffer_volt_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c038      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 c06d      	RJMP _timer1_compa_isr
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _tbl10_G102:
000013 2710
000014 03e8
000015 0064
000016 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000017 0001      	.DB  0x1,0x0
                 _tbl16_G102:
000018 1000
000019 0100
00001a 0010
00001b 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001c 0000
00001d 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
00001e 3d55
00001f 0020
000020 3d49
D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1139): warning: .cseg .db misalignment - padding zero byte
000021 0000      	.DB  0x55,0x3D,0x20,0x0,0x49,0x3D,0x0
                 _0x2000003:
000022 c080      	.DB  0x80,0xC0
                 _0x2020060:
D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1143): warning: .cseg .db misalignment - padding zero byte
000023 0001      	.DB  0x1
                 _0x2020000:
000024 4e2d
000025 4e41
000026 4900
000027 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\Радіо_електроніка\cxem\мої проекти\Авометр в БЖ_той, що зараз працює. V1.0\Debug\List\demo.asm(1146): warning: .cseg .db misalignment - padding zero byte
000028 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000029 0004      	.DW  0x04
00002a 0004      	.DW  0x04
00002b 0038      	.DW  __REG_VARS*2
                 
00002c 0004      	.DW  0x04
00002d 0160      	.DW  _0x3
00002e 003c      	.DW  _0x0*2
                 
00002f 0003      	.DW  0x03
000030 0164      	.DW  _0x3+4
000031 0040      	.DW  _0x0*2+4
                 
000032 0002      	.DW  0x02
000033 0197      	.DW  __base_y_G100
000034 0044      	.DW  _0x2000003*2
                 
000035 0001      	.DW  0x01
000036 019b      	.DW  __seed_G101
000037 0046      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000040 e08d      	LDI  R24,(14-2)+1
000041 e0a2      	LDI  R26,2
000042 27bb      	CLR  R27
                 __CLEAR_REG:
000043 93ed      	ST   X+,R30
000044 958a      	DEC  R24
000045 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000046 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000047 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000048 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000049 93ed      	ST   X+,R30
00004a 9701      	SBIW R24,1
00004b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004c e5e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004e 9185      	LPM  R24,Z+
00004f 9195      	LPM  R25,Z+
000050 9700      	SBIW R24,0
000051 f061      	BREQ __GLOBAL_INI_END
000052 91a5      	LPM  R26,Z+
000053 91b5      	LPM  R27,Z+
000054 9005      	LPM  R0,Z+
000055 9015      	LPM  R1,Z+
000056 01bf      	MOVW R22,R30
000057 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000058 9005      	LPM  R0,Z+
000059 920d      	ST   X+,R0
00005a 9701      	SBIW R24,1
00005b f7e1      	BRNE __GLOBAL_INI_LOOP
00005c 01fb      	MOVW R30,R22
00005d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005f bfed      	OUT  SPL,R30
000060 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000061 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000062 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000063 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000064 c096      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;#include <mega8.h>
                 ;
                 ;
                 ;
                 ;float current = 0.00;
                 ;float voltage = 0.00;
                 ;
                 ;int adc_buffer_curr = 0;
                 ;int adc_buffer_volt = 0;
                 ;
                 ;
                 ;
                 ;char lcd_buffer_current[20];
                 ;char lcd_buffer_voltage[20];
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
                 ;
                 ;void init_Timer()
                 ; 0000 001B {
                 
                 	.CSEG
                 _init_Timer:
                 ; .FSTART _init_Timer
                 ; 0000 001C 	// Timer/Counter 1 initialization
                 ; 0000 001D 	// Clock source: System Clock
                 ; 0000 001E 	// Clock value: 7,813 kHz
                 ; 0000 001F 	// Mode: Normal top=0xFFFF
                 ; 0000 0020 	// OC1A output: Disconnected
                 ; 0000 0021 	// OC1B output: Disconnected
                 ; 0000 0022 	// Noise Canceler: Off
                 ; 0000 0023 	// Input Capture on Falling Edge
                 ; 0000 0024 	// Timer Period: 8,3886 s
                 ; 0000 0025 	// Timer1 Overflow Interrupt: Off
                 ; 0000 0026 	// Input Capture Interrupt: Off
                 ; 0000 0027 	// Compare A Match Interrupt: On
                 ; 0000 0028 	// Compare B Match Interrupt: Off
                 ; 0000 0029 	TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
000065 e0e0      	LDI  R30,LOW(0)
000066 bdef      	OUT  0x2F,R30
                 ; 0000 002A 	TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (1 << CS12) | (0 << CS11) | (1 << CS10);
000067 e0e5      	LDI  R30,LOW(5)
000068 bdee      	OUT  0x2E,R30
                 ; 0000 002B 	TCNT1H = 0x00;
000069 d233      	RCALL SUBOPT_0x0
                 ; 0000 002C 	TCNT1L = 0x00;
                 ; 0000 002D 	ICR1H = 0x00;
00006a e0e0      	LDI  R30,LOW(0)
00006b bde7      	OUT  0x27,R30
                 ; 0000 002E 	ICR1L = 0x00;
00006c bde6      	OUT  0x26,R30
                 ; 0000 002F 	OCR1AH = 0x00;
00006d bdeb      	OUT  0x2B,R30
                 ; 0000 0030 	OCR1AL = 0xD0;
00006e ede0      	LDI  R30,LOW(208)
00006f bdea      	OUT  0x2A,R30
                 ; 0000 0031 	OCR1BH = 0x00;
000070 e0e0      	LDI  R30,LOW(0)
000071 bde9      	OUT  0x29,R30
                 ; 0000 0032 	OCR1BL = 0x00;
000072 bde8      	OUT  0x28,R30
                 ; 0000 0033 
                 ; 0000 0034 
                 ; 0000 0035 }
000073 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
                 ; 0000 0038 {
                 _timer1_compa_isr:
                 ; .FSTART _timer1_compa_isr
000074 920a      	ST   -Y,R0
000075 921a      	ST   -Y,R1
000076 92fa      	ST   -Y,R15
000077 936a      	ST   -Y,R22
000078 937a      	ST   -Y,R23
000079 938a      	ST   -Y,R24
00007a 939a      	ST   -Y,R25
00007b 93aa      	ST   -Y,R26
00007c 93ba      	ST   -Y,R27
00007d 93ea      	ST   -Y,R30
00007e 93fa      	ST   -Y,R31
00007f b7ef      	IN   R30,SREG
000080 93ea      	ST   -Y,R30
                 ; 0000 0039 	//lcd_clear();
                 ; 0000 003A 	ftoa(voltage, 1, lcd_buffer_voltage);
000081 91e0 016b 	LDS  R30,_voltage
000083 91f0 016c 	LDS  R31,_voltage+1
000085 9160 016d 	LDS  R22,_voltage+2
000087 9170 016e 	LDS  R23,_voltage+3
000089 d298      	RCALL __PUTPARD1
00008a e0e1      	LDI  R30,LOW(1)
00008b 93ea      	ST   -Y,R30
00008c e8a3      	LDI  R26,LOW(_lcd_buffer_voltage)
00008d e0b1      	LDI  R27,HIGH(_lcd_buffer_voltage)
00008e d127      	RCALL _ftoa
                 ; 0000 003B 	lcd_gotoxy(0, 0);
00008f e0e0      	LDI  R30,LOW(0)
000090 93ea      	ST   -Y,R30
000091 e0a0      	LDI  R26,LOW(0)
000092 d0c0      	RCALL _lcd_gotoxy
                 ; 0000 003C 	lcd_puts("U= ");
                +
000093 e6a0     +LDI R26 , LOW ( _0x3 + ( 0 ) )
000094 e0b1     +LDI R27 , HIGH ( _0x3 + ( 0 ) )
                 	__POINTW2MN _0x3,0
000095 d0e9      	RCALL _lcd_puts
                 ; 0000 003D 	lcd_gotoxy(3, 0);
000096 e0e3      	LDI  R30,LOW(3)
000097 93ea      	ST   -Y,R30
000098 e0a0      	LDI  R26,LOW(0)
000099 d0b9      	RCALL _lcd_gotoxy
                 ; 0000 003E 	lcd_puts(lcd_buffer_voltage);
00009a e8a3      	LDI  R26,LOW(_lcd_buffer_voltage)
00009b e0b1      	LDI  R27,HIGH(_lcd_buffer_voltage)
00009c d0e2      	RCALL _lcd_puts
                 ; 0000 003F 
                 ; 0000 0040 
                 ; 0000 0041 	ftoa(current, 2, lcd_buffer_current);
00009d 91e0 0167 	LDS  R30,_current
00009f 91f0 0168 	LDS  R31,_current+1
0000a1 9160 0169 	LDS  R22,_current+2
0000a3 9170 016a 	LDS  R23,_current+3
0000a5 d27c      	RCALL __PUTPARD1
0000a6 e0e2      	LDI  R30,LOW(2)
0000a7 93ea      	ST   -Y,R30
0000a8 e6af      	LDI  R26,LOW(_lcd_buffer_current)
0000a9 e0b1      	LDI  R27,HIGH(_lcd_buffer_current)
0000aa d10b      	RCALL _ftoa
                 ; 0000 0042 	lcd_gotoxy(0, 1);
0000ab e0e0      	LDI  R30,LOW(0)
0000ac 93ea      	ST   -Y,R30
0000ad e0a1      	LDI  R26,LOW(1)
0000ae d0a4      	RCALL _lcd_gotoxy
                 ; 0000 0043 	lcd_puts("I=");
                +
0000af e6a4     +LDI R26 , LOW ( _0x3 + ( 4 ) )
0000b0 e0b1     +LDI R27 , HIGH ( _0x3 + ( 4 ) )
                 	__POINTW2MN _0x3,4
0000b1 d0cd      	RCALL _lcd_puts
                 ; 0000 0044 	lcd_gotoxy(3, 1);
0000b2 e0e3      	LDI  R30,LOW(3)
0000b3 93ea      	ST   -Y,R30
0000b4 e0a1      	LDI  R26,LOW(1)
0000b5 d09d      	RCALL _lcd_gotoxy
                 ; 0000 0045 	lcd_puts(lcd_buffer_current);
0000b6 e6af      	LDI  R26,LOW(_lcd_buffer_current)
0000b7 e0b1      	LDI  R27,HIGH(_lcd_buffer_current)
0000b8 d0c6      	RCALL _lcd_puts
                 ; 0000 0046 
                 ; 0000 0047 
                 ; 0000 0048 
                 ; 0000 0049 
                 ; 0000 004A 	current = 0.00;
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba 93e0 0167 	STS  _current,R30
0000bc 93e0 0168 	STS  _current+1,R30
0000be 93e0 0169 	STS  _current+2,R30
0000c0 93e0 016a 	STS  _current+3,R30
                 ; 0000 004B 	voltage = 0.00;
0000c2 93e0 016b 	STS  _voltage,R30
0000c4 93e0 016c 	STS  _voltage+1,R30
0000c6 93e0 016d 	STS  _voltage+2,R30
0000c8 93e0 016e 	STS  _voltage+3,R30
                 ; 0000 004C 
                 ; 0000 004D 	TCNT1H = 0;
0000ca d1d2      	RCALL SUBOPT_0x0
                 ; 0000 004E 	TCNT1L = 0;
                 ; 0000 004F }
0000cb 91e9      	LD   R30,Y+
0000cc bfef      	OUT  SREG,R30
0000cd 91f9      	LD   R31,Y+
0000ce 91e9      	LD   R30,Y+
0000cf 91b9      	LD   R27,Y+
0000d0 91a9      	LD   R26,Y+
0000d1 9199      	LD   R25,Y+
0000d2 9189      	LD   R24,Y+
0000d3 9179      	LD   R23,Y+
0000d4 9169      	LD   R22,Y+
0000d5 90f9      	LD   R15,Y+
0000d6 9019      	LD   R1,Y+
0000d7 9009      	LD   R0,Y+
0000d8 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0x7
                 ;
                 ;void init_ADC()
                 ; 0000 0052 {
                 
                 	.CSEG
                 _init_ADC:
                 ; .FSTART _init_ADC
                 ; 0000 0053 
                 ; 0000 0054 	ADMUX = ADC_VREF_TYPE;
0000d9 e2e0      	LDI  R30,LOW(32)
0000da b9e7      	OUT  0x7,R30
                 ; 0000 0055 	ADCSRA = (1 << ADEN) | (0 << ADSC) | (0 << ADFR) | (0 << ADIF) | (0 << ADIE) | (0 << ADPS2) | (1 << ADPS1) | (1 << ADPS ...
0000db e8e3      	LDI  R30,LOW(131)
0000dc b9e6      	OUT  0x6,R30
                 ; 0000 0056 	SFIOR = (0 << ACME);
0000dd e0e0      	LDI  R30,LOW(0)
0000de bfe0      	OUT  0x30,R30
                 ; 0000 0057 
                 ; 0000 0058 
                 ; 0000 0059 }
0000df 9508      	RET
                 ; .FEND
                 ;void init_port()
                 ; 0000 005B {
                 _init_port:
                 ; .FSTART _init_port
                 ; 0000 005C 	DDRB = (1 << DDB7) | (1 << DDB6) | (1 << DDB5) | (1 << DDB4) | (1 << DDB3) | (1 << DDB2) | (1 << DDB1) | (1 << DDB0);
0000e0 efef      	LDI  R30,LOW(255)
0000e1 bbe7      	OUT  0x17,R30
                 ; 0000 005D 	PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1) | ...
0000e2 e0e0      	LDI  R30,LOW(0)
0000e3 bbe8      	OUT  0x18,R30
                 ; 0000 005E 
                 ; 0000 005F 	DDRC = (1 << DDC6) | (1 << DDC5) | (1 << DDC4) | (1 << DDC3) | (1 << DDC2) | (0 << DDC1) | (0 << DDC0);
0000e4 e7ec      	LDI  R30,LOW(124)
0000e5 bbe4      	OUT  0x14,R30
                 ; 0000 0060 	PORTC = (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1) | (0 << PORTC0);
0000e6 e0e0      	LDI  R30,LOW(0)
0000e7 bbe5      	OUT  0x15,R30
                 ; 0000 0061 
                 ; 0000 0062 	DDRD = (1 << DDD7) | (1 << DDD6) | (1 << DDD5) | (1 << DDD4) | (1 << DDD3) | (1 << DDD2) | (1 << DDD1) | (1 << DDD0);
0000e8 efef      	LDI  R30,LOW(255)
0000e9 bbe1      	OUT  0x11,R30
                 ; 0000 0063 	PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1) | ...
0000ea e0e0      	LDI  R30,LOW(0)
0000eb bbe2      	OUT  0x12,R30
                 ; 0000 0064 }
0000ec 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0067 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0068 	ADMUX = adc_input | ADC_VREF_TYPE;
0000ed d1b3      	RCALL SUBOPT_0x1
                 ;	adc_input -> R17
0000ee 2fe1      	MOV  R30,R17
0000ef 62e0      	ORI  R30,0x20
0000f0 b9e7      	OUT  0x7,R30
                 ; 0000 0069 	// Delay needed for the stabilization of the ADC input voltage
                 ; 0000 006A 	delay_us(10);
                +
0000f1 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000f2 958a     +DEC R24
0000f3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 006B 	// Start the AD conversion
                 ; 0000 006C 	ADCSRA |= (1 << ADSC);
0000f4 9a36      	SBI  0x6,6
                 ; 0000 006D 	// Wait for the AD conversion to complete
                 ; 0000 006E 	while ((ADCSRA & (1 << ADIF)) == 0);
                 _0x4:
0000f5 9b34      	SBIS 0x6,4
0000f6 cffe      	RJMP _0x4
                 ; 0000 006F 	ADCSRA |= (1 << ADIF);
0000f7 9a34      	SBI  0x6,4
                 ; 0000 0070 	return ADCH;
0000f8 b1e5      	IN   R30,0x5
0000f9 e0f0      	LDI  R31,0
0000fa c0b9      	RJMP _0x20C0004
                 ; 0000 0071 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0074 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0075 	TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (1 << OCIE1A) | (0 << OCIE1B) | (0 << TOIE1) | (0 << TOIE0);
0000fb e1e0      	LDI  R30,LOW(16)
0000fc bfe9      	OUT  0x39,R30
                 ; 0000 0076 	MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
0000fd e0e0      	LDI  R30,LOW(0)
0000fe bfe5      	OUT  0x35,R30
                 ; 0000 0077 	UCSRB = (0 << RXCIE) | (0 << TXCIE) | (0 << UDRIE) | (0 << RXEN) | (0 << TXEN) | (0 << UCSZ2) | (0 << RXB8) | (0 << TXB ...
0000ff b9ea      	OUT  0xA,R30
                 ; 0000 0078 
                 ; 0000 0079 	init_ADC();
000100 dfd8      	RCALL _init_ADC
                 ; 0000 007A 	init_port();
000101 dfde      	RCALL _init_port
                 ; 0000 007B 	init_Timer();
000102 df62      	RCALL _init_Timer
                 ; 0000 007C 	lcd_init(12);
000103 e0ac      	LDI  R26,LOW(12)
000104 d086      	RCALL _lcd_init
                 ; 0000 007D 
                 ; 0000 007E #asm("sei");
000105 9478      	SEI
                 ; 0000 007F 
                 ; 0000 0080 	while (1)
                 _0x7:
                 ; 0000 0081 		{
                 ; 0000 0082 
                 ; 0000 0083 		adc_buffer_curr = read_adc(1);
000106 e0a1      	LDI  R26,LOW(1)
000107 dfe5      	RCALL _read_adc
000108 012f      	MOVW R4,R30
                 ; 0000 0084 
                 ; 0000 0085 		adc_buffer_volt = read_adc(0);
000109 e0a0      	LDI  R26,LOW(0)
00010a dfe2      	RCALL _read_adc
00010b 013f      	MOVW R6,R30
                 ; 0000 0086 
                 ; 0000 0087 
                 ; 0000 0088 		voltage = (4.97 * 5.00 * adc_buffer_volt) / 256.00;
00010c d197      	RCALL SUBOPT_0x2
                +
00010d ecad     +LDI R26 , LOW ( 0x41C6CCCD )
00010e ecbc     +LDI R27 , HIGH ( 0x41C6CCCD )
00010f ec86     +LDI R24 , BYTE3 ( 0x41C6CCCD )
000110 e491     +LDI R25 , BYTE4 ( 0x41C6CCCD )
                 	__GETD2N 0x41C6CCCD
000111 d195      	RCALL SUBOPT_0x3
000112 93e0 016b 	STS  _voltage,R30
000114 93f0 016c 	STS  _voltage+1,R31
000116 9360 016d 	STS  _voltage+2,R22
000118 9370 016e 	STS  _voltage+3,R23
                 ; 0000 0089 		current = (4.97 * adc_buffer_curr) / 256.00;
00011a 01f2      	MOVW R30,R4
00011b d188      	RCALL SUBOPT_0x2
                +
00011c e3ad     +LDI R26 , LOW ( 0x409F0A3D )
00011d e0ba     +LDI R27 , HIGH ( 0x409F0A3D )
00011e e98f     +LDI R24 , BYTE3 ( 0x409F0A3D )
00011f e490     +LDI R25 , BYTE4 ( 0x409F0A3D )
                 	__GETD2N 0x409F0A3D
000120 d186      	RCALL SUBOPT_0x3
000121 93e0 0167 	STS  _current,R30
000123 93f0 0168 	STS  _current+1,R31
000125 9360 0169 	STS  _current+2,R22
000127 9370 016a 	STS  _current+3,R23
                 ; 0000 008A 
                 ; 0000 008B 
                 ; 0000 008C 
                 ; 0000 008D 
                 ; 0000 008E 
                 ; 0000 008F 		}
000129 cfdc      	RJMP _0x7
                 ; 0000 0090 }
                 _0xA:
00012a cfff      	RJMP _0xA
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00012b d175      	RCALL SUBOPT_0x1
00012c ff14      	SBRS R17,4
00012d c002      	RJMP _0x2000004
00012e 9a93      	SBI  0x12,3
00012f c001      	RJMP _0x2000005
                 _0x2000004:
000130 9893      	CBI  0x12,3
                 _0x2000005:
000131 ff15      	SBRS R17,5
000132 c002      	RJMP _0x2000006
000133 9a94      	SBI  0x12,4
000134 c001      	RJMP _0x2000007
                 _0x2000006:
000135 9894      	CBI  0x12,4
                 _0x2000007:
000136 ff16      	SBRS R17,6
000137 c002      	RJMP _0x2000008
000138 9a95      	SBI  0x12,5
000139 c001      	RJMP _0x2000009
                 _0x2000008:
00013a 9895      	CBI  0x12,5
                 _0x2000009:
00013b ff17      	SBRS R17,7
00013c c002      	RJMP _0x200000A
00013d 9a96      	SBI  0x12,6
00013e c001      	RJMP _0x200000B
                 _0x200000A:
00013f 9896      	CBI  0x12,6
                 _0x200000B:
000140 d16f      	RCALL SUBOPT_0x4
000141 9a92      	SBI  0x12,2
000142 d16d      	RCALL SUBOPT_0x4
000143 9892      	CBI  0x12,2
000144 d16b      	RCALL SUBOPT_0x4
000145 c06e      	RJMP _0x20C0004
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000146 93aa      	ST   -Y,R26
000147 81a8      	LD   R26,Y
000148 dfe2      	RCALL __lcd_write_nibble_G100
000149 81e8          ld    r30,y
00014a 95e2          swap  r30
00014b 83e8          st    y,r30
00014c 81a8      	LD   R26,Y
00014d dfdd      	RCALL __lcd_write_nibble_G100
                +
00014e e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00014f 958a     +DEC R24
000150 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000151 9621      	ADIW R28,1
000152 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000153 d1a8      	RCALL __SAVELOCR2
000154 2f1a      	MOV  R17,R26
000155 810a      	LDD  R16,Y+2
000156 2fe1      	MOV  R30,R17
000157 e0f0      	LDI  R31,0
000158 56e9      	SUBI R30,LOW(-__base_y_G100)
000159 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00015a 81e0      	LD   R30,Z
00015b 0fe0      	ADD  R30,R16
00015c 2fae      	MOV  R26,R30
00015d dfe8      	RCALL __lcd_write_data
00015e 2e90      	MOV  R9,R16
00015f 2e81      	MOV  R8,R17
000160 d1a2      	RCALL __LOADLOCR2
000161 9623      	ADIW R28,3
000162 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000163 e0a2      	LDI  R26,LOW(2)
000164 d14f      	RCALL SUBOPT_0x5
000165 e0ac      	LDI  R26,LOW(12)
000166 dfdf      	RCALL __lcd_write_data
000167 e0a1      	LDI  R26,LOW(1)
000168 d14b      	RCALL SUBOPT_0x5
000169 e0e0      	LDI  R30,LOW(0)
00016a 2e8e      	MOV  R8,R30
00016b 2e9e      	MOV  R9,R30
00016c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00016d d133      	RCALL SUBOPT_0x1
00016e 301a      	CPI  R17,10
00016f f011      	BREQ _0x2000011
000170 149b      	CP   R9,R11
000171 f038      	BRLO _0x2000010
                 _0x2000011:
000172 e0e0      	LDI  R30,LOW(0)
000173 93ea      	ST   -Y,R30
000174 9483      	INC  R8
000175 2da8      	MOV  R26,R8
000176 dfdc      	RCALL _lcd_gotoxy
000177 301a      	CPI  R17,10
000178 f1d9      	BREQ _0x20C0004
                 _0x2000010:
000179 9493      	INC  R9
00017a 9a90      	SBI  0x12,0
00017b 2fa1      	MOV  R26,R17
00017c dfc9      	RCALL __lcd_write_data
00017d 9890      	CBI  0x12,0
00017e c035      	RJMP _0x20C0004
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00017f d17a      	RCALL __SAVELOCR4
000180 019d      	MOVW R18,R26
                 _0x2000014:
000181 d136      	RCALL SUBOPT_0x6
000182 91ec      	LD   R30,X
000183 2f1e      	MOV  R17,R30
000184 30e0      	CPI  R30,0
000185 f019      	BREQ _0x2000016
000186 2fa1      	MOV  R26,R17
000187 dfe5      	RCALL _lcd_putchar
000188 cff8      	RJMP _0x2000014
                 _0x2000016:
000189 d177      	RCALL __LOADLOCR4
00018a c103      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00018b d115      	RCALL SUBOPT_0x1
00018c 9a8b      	SBI  0x11,3
00018d 9a8c      	SBI  0x11,4
00018e 9a8d      	SBI  0x11,5
00018f 9a8e      	SBI  0x11,6
000190 9a8a      	SBI  0x11,2
000191 9a88      	SBI  0x11,0
000192 9a89      	SBI  0x11,1
000193 9892      	CBI  0x12,2
000194 9890      	CBI  0x12,0
000195 9891      	CBI  0x12,1
000196 2eb1      	MOV  R11,R17
000197 2fe1      	MOV  R30,R17
000198 58e0      	SUBI R30,-LOW(128)
                +
000199 93e0 0199+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00019b 2fe1      	MOV  R30,R17
00019c 54e0      	SUBI R30,-LOW(192)
                +
00019d 93e0 019a+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00019f e1a4      	LDI  R26,LOW(20)
0001a0 e0b0      	LDI  R27,0
0001a1 d33e      	RCALL _delay_ms
0001a2 d119      	RCALL SUBOPT_0x7
0001a3 d118      	RCALL SUBOPT_0x7
0001a4 d117      	RCALL SUBOPT_0x7
0001a5 e2a0      	LDI  R26,LOW(32)
0001a6 df84      	RCALL __lcd_write_nibble_G100
                +
0001a7 ec88     +LDI R24 , LOW ( 200 )
0001a8 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a9 9701     +SBIW R24 , 1
0001aa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001ab e2a8      	LDI  R26,LOW(40)
0001ac df99      	RCALL __lcd_write_data
0001ad e0a4      	LDI  R26,LOW(4)
0001ae df97      	RCALL __lcd_write_data
0001af e8a5      	LDI  R26,LOW(133)
0001b0 df95      	RCALL __lcd_write_data
0001b1 e0a6      	LDI  R26,LOW(6)
0001b2 df93      	RCALL __lcd_write_data
0001b3 dfaf      	RCALL _lcd_clear
                 _0x20C0004:
0001b4 9119      	LD   R17,Y+
0001b5 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftoa:
                 ; .FSTART _ftoa
0001b6 9724      	SBIW R28,4
0001b7 e0e0      	LDI  R30,LOW(0)
0001b8 83e8      	ST   Y,R30
0001b9 83e9      	STD  Y+1,R30
0001ba 83ea      	STD  Y+2,R30
0001bb e3ef      	LDI  R30,LOW(63)
0001bc 83eb      	STD  Y+3,R30
0001bd d13a      	RCALL __SAVELOCR6
0001be 019d      	MOVW R18,R26
0001bf 855a      	LDD  R21,Y+10
0001c0 85ed      	LDD  R30,Y+13
0001c1 85fe      	LDD  R31,Y+13+1
0001c2 3fef      	CPI  R30,LOW(0xFFFF)
0001c3 efaf      	LDI  R26,HIGH(0xFFFF)
0001c4 07fa      	CPC  R31,R26
0001c5 f431      	BRNE _0x202000D
0001c6 933a      	ST   -Y,R19
0001c7 932a      	ST   -Y,R18
                +
0001c8 e4a8     +LDI R26 , LOW ( 2 * _0x2020000 + ( 0 ) )
0001c9 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 0 ) )
                 	__POINTW2FN _0x2020000,0
0001ca d0c5      	RCALL _strcpyf
0001cb c081      	RJMP _0x20C0003
                 _0x202000D:
0001cc 3fef      	CPI  R30,LOW(0x7FFF)
0001cd e7af      	LDI  R26,HIGH(0x7FFF)
0001ce 07fa      	CPC  R31,R26
0001cf f431      	BRNE _0x202000C
0001d0 933a      	ST   -Y,R19
0001d1 932a      	ST   -Y,R18
                +
0001d2 e4a9     +LDI R26 , LOW ( 2 * _0x2020000 + ( 1 ) )
0001d3 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 1 ) )
                 	__POINTW2FN _0x2020000,1
0001d4 d0bb      	RCALL _strcpyf
0001d5 c077      	RJMP _0x20C0003
                 _0x202000C:
0001d6 85ae      	LDD  R26,Y+14
0001d7 23aa      	TST  R26
0001d8 f432      	BRPL _0x202000F
0001d9 d0e9      	RCALL SUBOPT_0x8
0001da d15e      	RCALL __ANEGF1
0001db d0ec      	RCALL SUBOPT_0x9
0001dc d0db      	RCALL SUBOPT_0x6
0001dd e2ed      	LDI  R30,LOW(45)
0001de 93ec      	ST   X,R30
                 _0x202000F:
0001df 3057      	CPI  R21,7
0001e0 f008      	BRLO _0x2020010
0001e1 e056      	LDI  R21,LOW(6)
                 _0x2020010:
0001e2 2f15      	MOV  R17,R21
                 _0x2020011:
0001e3 2fe1      	MOV  R30,R17
0001e4 5011      	SUBI R17,1
0001e5 30e0      	CPI  R30,0
0001e6 f021      	BREQ _0x2020013
0001e7 d0e5      	RCALL SUBOPT_0xA
0001e8 d0e9      	RCALL SUBOPT_0xB
0001e9 d0ee      	RCALL SUBOPT_0xC
0001ea cff8      	RJMP _0x2020011
                 _0x2020013:
0001eb d0f1      	RCALL SUBOPT_0xD
0001ec d1f2      	RCALL __ADDF12
0001ed d0da      	RCALL SUBOPT_0x9
0001ee e010      	LDI  R17,LOW(0)
                +
0001ef e0e0     +LDI R30 , LOW ( 0x3F800000 )
0001f0 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0001f1 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0001f2 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0001f3 d0e4      	RCALL SUBOPT_0xC
                 _0x2020014:
0001f4 d0e8      	RCALL SUBOPT_0xD
0001f5 d2ca      	RCALL __CMPF12
0001f6 f068      	BRLO _0x2020016
0001f7 d0d5      	RCALL SUBOPT_0xA
0001f8 d0ed      	RCALL SUBOPT_0xE
0001f9 d0de      	RCALL SUBOPT_0xC
0001fa 5f1f      	SUBI R17,-LOW(1)
0001fb 3217      	CPI  R17,39
0001fc f030      	BRLO _0x2020017
0001fd 933a      	ST   -Y,R19
0001fe 932a      	ST   -Y,R18
                +
0001ff e4ad     +LDI R26 , LOW ( 2 * _0x2020000 + ( 5 ) )
000200 e0b0     +LDI R27 , HIGH ( 2 * _0x2020000 + ( 5 ) )
                 	__POINTW2FN _0x2020000,5
000201 d08e      	RCALL _strcpyf
000202 c04a      	RJMP _0x20C0003
                 _0x2020017:
000203 cff0      	RJMP _0x2020014
                 _0x2020016:
000204 3010      	CPI  R17,0
000205 f421      	BRNE _0x2020018
000206 d0b1      	RCALL SUBOPT_0x6
000207 e3e0      	LDI  R30,LOW(48)
000208 93ec      	ST   X,R30
000209 c023      	RJMP _0x2020019
                 _0x2020018:
                 _0x202001A:
00020a 2fe1      	MOV  R30,R17
00020b 5011      	SUBI R17,1
00020c 30e0      	CPI  R30,0
00020d f0f9      	BREQ _0x202001C
00020e d0be      	RCALL SUBOPT_0xA
00020f d0c2      	RCALL SUBOPT_0xB
                +
000210 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000211 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000212 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000213 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000214 d1ca      	RCALL __ADDF12
000215 01df      	MOVW R26,R30
000216 01cb      	MOVW R24,R22
000217 d068      	RCALL _floor
000218 d0bf      	RCALL SUBOPT_0xC
000219 d0c3      	RCALL SUBOPT_0xD
00021a d261      	RCALL __DIVF21
00021b d150      	RCALL __CFD1U
00021c 2f0e      	MOV  R16,R30
00021d 933f      	PUSH R19
00021e 932f      	PUSH R18
00021f d0cc      	RCALL SUBOPT_0xF
000220 91af      	POP  R26
000221 91bf      	POP  R27
000222 93ec      	ST   X,R30
000223 2fe0      	MOV  R30,R16
000224 e0f0      	LDI  R31,0
000225 d0a7      	RCALL SUBOPT_0xA
000226 d07d      	RCALL SUBOPT_0x2
000227 d206      	RCALL __MULF12
000228 d0c8      	RCALL SUBOPT_0x10
000229 d102      	RCALL __SWAPD12
00022a d1ad      	RCALL __SUBF12
00022b d09c      	RCALL SUBOPT_0x9
00022c cfdd      	RJMP _0x202001A
                 _0x202001C:
                 _0x2020019:
00022d 3050      	CPI  R21,0
00022e f0d9      	BREQ _0x20C0002
00022f d088      	RCALL SUBOPT_0x6
000230 e2ee      	LDI  R30,LOW(46)
000231 93ec      	ST   X,R30
                 _0x202001E:
000232 2fe5      	MOV  R30,R21
000233 5051      	SUBI R21,1
000234 30e0      	CPI  R30,0
000235 f0a1      	BREQ _0x2020020
000236 d0ba      	RCALL SUBOPT_0x10
000237 d0ae      	RCALL SUBOPT_0xE
000238 d08f      	RCALL SUBOPT_0x9
000239 d089      	RCALL SUBOPT_0x8
00023a d131      	RCALL __CFD1U
00023b 2f0e      	MOV  R16,R30
00023c 933f      	PUSH R19
00023d 932f      	PUSH R18
00023e d0ad      	RCALL SUBOPT_0xF
00023f 91af      	POP  R26
000240 91bf      	POP  R27
000241 93ec      	ST   X,R30
000242 2fe0      	MOV  R30,R16
000243 e0f0      	LDI  R31,0
000244 d0ac      	RCALL SUBOPT_0x10
000245 d05e      	RCALL SUBOPT_0x2
000246 d0e5      	RCALL __SWAPD12
000247 d190      	RCALL __SUBF12
000248 d07f      	RCALL SUBOPT_0x9
000249 cfe8      	RJMP _0x202001E
                 _0x2020020:
                 _0x20C0002:
00024a 01d9      	MOVW R26,R18
00024b e0e0      	LDI  R30,LOW(0)
00024c 93ec      	ST   X,R30
                 _0x20C0003:
00024d d0b1      	RCALL __LOADLOCR6
00024e 962f      	ADIW R28,15
00024f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
000250 d0d6      	RCALL __PUTPARD2
000251 817b         ldd  r23,y+3
000252 816a         ldd  r22,y+2
000253 81f9         ldd  r31,y+1
000254 81e8         ld   r30,y
000255 fb77         bst  r23,7
000256 0f77         lsl  r23
000257 fd67         sbrc r22,7
000258 6071         sbr  r23,1
000259 2f97         mov  r25,r23
00025a 579e         subi r25,0x7e
00025b f081         breq __ftrunc0
00025c f078         brcs __ftrunc0
00025d 3198         cpi  r25,24
00025e f490         brsh __ftrunc1
00025f 27aa         clr  r26
000260 27bb         clr  r27
000261 2788         clr  r24
                 __ftrunc2:
000262 9408         sec
000263 9587         ror  r24
000264 95b7         ror  r27
000265 95a7         ror  r26
000266 959a         dec  r25
000267 f7d1         brne __ftrunc2
000268 23ea         and  r30,r26
000269 23fb         and  r31,r27
00026a 2368         and  r22,r24
00026b c005         rjmp __ftrunc1
                 __ftrunc0:
00026c 94e8         clt
00026d 2777         clr  r23
00026e 27ee         clr  r30
00026f 27ff         clr  r31
000270 2766         clr  r22
                 __ftrunc1:
000271 776f         cbr  r22,0x80
000272 9576         lsr  r23
000273 f408         brcc __ftrunc3
000274 6860         sbr  r22,0x80
                 __ftrunc3:
000275 f977         bld  r23,7
000276 91a9         ld   r26,y+
000277 91b9         ld   r27,y+
000278 9189         ld   r24,y+
000279 9199         ld   r25,y+
00027a 17ea         cp   r30,r26
00027b 07fb         cpc  r31,r27
00027c 0768         cpc  r22,r24
00027d 0779         cpc  r23,r25
00027e fb97         bst  r25,7
00027f 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
000280 d0a6      	RCALL __PUTPARD2
000281 d096      	RCALL __GETD2S0
000282 dfcd      	RCALL _ftrunc
000283 d099      	RCALL __PUTD1S0
000284 f411          brne __floor1
                 __floor0:
000285 d070      	RCALL SUBOPT_0x11
000286 c007      	RJMP _0x20C0001
                 __floor1:
000287 f7ee          brtc __floor0
000288 d06d      	RCALL SUBOPT_0x11
                +
000289 e0a0     +LDI R26 , LOW ( 0x3F800000 )
00028a e0b0     +LDI R27 , HIGH ( 0x3F800000 )
00028b e880     +LDI R24 , BYTE3 ( 0x3F800000 )
00028c e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
00028d d14a      	RCALL __SUBF12
                 _0x20C0001:
00028e 9624      	ADIW R28,4
00028f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
000290 93ba      	ST   -Y,R27
000291 93aa      	ST   -Y,R26
000292 91e9          ld   r30,y+
000293 91f9          ld   r31,y+
000294 91a9          ld   r26,y+
000295 91b9          ld   r27,y+
000296 01cd          movw r24,r26
                 strcpyf0:
000297 9005      	lpm  r0,z+
000298 920d          st   x+,r0
000299 2000          tst  r0
00029a f7e1          brne strcpyf0
00029b 01fc          movw r30,r24
00029c 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _current:
000167           	.BYTE 0x4
                 _voltage:
00016b           	.BYTE 0x4
                 _lcd_buffer_current:
00016f           	.BYTE 0x14
                 _lcd_buffer_voltage:
000183           	.BYTE 0x14
                 __base_y_G100:
000197           	.BYTE 0x4
                 __seed_G101:
00019b           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00029d e0e0      	LDI  R30,LOW(0)
00029e bded      	OUT  0x2D,R30
00029f bdec      	OUT  0x2C,R30
0002a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0002a1 931a      	ST   -Y,R17
0002a2 2f1a      	MOV  R17,R26
0002a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0002a4 d069      	RCALL __CWD1
0002a5 d0ff      	RCALL __CDF1
0002a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0002a7 d186      	RCALL __MULF12
0002a8 01df      	MOVW R26,R30
0002a9 01cb      	MOVW R24,R22
                +
0002aa e0e0     +LDI R30 , LOW ( 0x43800000 )
0002ab e0f0     +LDI R31 , HIGH ( 0x43800000 )
0002ac e860     +LDI R22 , BYTE3 ( 0x43800000 )
0002ad e473     +LDI R23 , BYTE4 ( 0x43800000 )
                 	__GETD1N 0x43800000
0002ae d1cd      	RCALL __DIVF21
0002af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
                +
0002b0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002b1 958a     +DEC R24
0002b2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0002b4 de91      	RCALL __lcd_write_data
0002b5 e0a3      	LDI  R26,LOW(3)
0002b6 e0b0      	LDI  R27,0
0002b7 c228      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0002b8 01d9      	MOVW R26,R18
                +
0002b9 5f2f     +SUBI R18 , LOW ( - 1 )
0002ba 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x7:
0002bc e3a0      	LDI  R26,LOW(48)
0002bd de6d      	RCALL __lcd_write_nibble_G100
                +
0002be ec88     +LDI R24 , LOW ( 200 )
0002bf e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002c0 9701     +SBIW R24 , 1
0002c1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
                +
0002c3 85eb     +LDD R30 , Y + 11
0002c4 85fc     +LDD R31 , Y + 11 + 1
0002c5 856d     +LDD R22 , Y + 11 + 2
0002c6 857e     +LDD R23 , Y + 11 + 3
                 	__GETD1S 11
0002c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x9:
                +
0002c8 87eb     +STD Y + 11 , R30
0002c9 87fc     +STD Y + 11 + 1 , R31
0002ca 876d     +STD Y + 11 + 2 , R22
0002cb 877e     +STD Y + 11 + 3 , R23
                 	__PUTD1S 11
0002cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
                +
0002cd 81ae     +LDD R26 , Y + 6
0002ce 81bf     +LDD R27 , Y + 6 + 1
0002cf 8588     +LDD R24 , Y + 6 + 2
0002d0 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
0002d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
                +
0002d2 eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0002d3 ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0002d4 ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0002d5 e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0002d6 d157      	RCALL __MULF12
0002d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
                +
0002d8 83ee     +STD Y + 6 , R30
0002d9 83ff     +STD Y + 6 + 1 , R31
0002da 8768     +STD Y + 6 + 2 , R22
0002db 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
0002dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xD:
                +
0002dd 81ee     +LDD R30 , Y + 6
0002de 81ff     +LDD R31 , Y + 6 + 1
0002df 8568     +LDD R22 , Y + 6 + 2
0002e0 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
0002e1 85ab     +LDD R26 , Y + 11
0002e2 85bc     +LDD R27 , Y + 11 + 1
0002e3 858d     +LDD R24 , Y + 11 + 2
0002e4 859e     +LDD R25 , Y + 11 + 3
                 	__GETD2S 11
0002e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
                +
0002e6 e0e0     +LDI R30 , LOW ( 0x41200000 )
0002e7 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0002e8 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0002e9 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0002ea d143      	RCALL __MULF12
0002eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
                +
0002ec 5f2f     +SUBI R18 , LOW ( - 1 )
0002ed 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002ee 2fe0      	MOV  R30,R16
0002ef 5de0      	SUBI R30,-LOW(48)
0002f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
                +
0002f1 85ab     +LDD R26 , Y + 11
0002f2 85bc     +LDD R27 , Y + 11 + 1
0002f3 858d     +LDD R24 , Y + 11 + 2
0002f4 859e     +LDD R25 , Y + 11 + 3
                 	__GETD2S 11
0002f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0002f6 d01c      	RCALL __GETD1S0
0002f7 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0002f8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002f9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002fa 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002fb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002fc 931a      	ST   -Y,R17
0002fd 930a      	ST   -Y,R16
0002fe 9508      	RET
                 
                 __LOADLOCR6:
0002ff 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000300 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000301 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000302 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000303 8119      	LDD  R17,Y+1
000304 8108      	LD   R16,Y
000305 9508      	RET
                 
                 __ANEGD1:
000306 95f0      	COM  R31
000307 9560      	COM  R22
000308 9570      	COM  R23
000309 95e1      	NEG  R30
00030a 4fff      	SBCI R31,-1
00030b 4f6f      	SBCI R22,-1
00030c 4f7f      	SBCI R23,-1
00030d 9508      	RET
                 
                 __CWD1:
00030e 2f6f      	MOV  R22,R31
00030f 0f66      	ADD  R22,R22
000310 0b66      	SBC  R22,R22
000311 2f76      	MOV  R23,R22
000312 9508      	RET
                 
                 __GETD1S0:
000313 81e8      	LD   R30,Y
000314 81f9      	LDD  R31,Y+1
000315 816a      	LDD  R22,Y+2
000316 817b      	LDD  R23,Y+3
000317 9508      	RET
                 
                 __GETD2S0:
000318 81a8      	LD   R26,Y
000319 81b9      	LDD  R27,Y+1
00031a 818a      	LDD  R24,Y+2
00031b 819b      	LDD  R25,Y+3
00031c 9508      	RET
                 
                 __PUTD1S0:
00031d 83e8      	ST   Y,R30
00031e 83f9      	STD  Y+1,R31
00031f 836a      	STD  Y+2,R22
000320 837b      	STD  Y+3,R23
000321 9508      	RET
                 
                 __PUTPARD1:
000322 937a      	ST   -Y,R23
000323 936a      	ST   -Y,R22
000324 93fa      	ST   -Y,R31
000325 93ea      	ST   -Y,R30
000326 9508      	RET
                 
                 __PUTPARD2:
000327 939a      	ST   -Y,R25
000328 938a      	ST   -Y,R24
000329 93ba      	ST   -Y,R27
00032a 93aa      	ST   -Y,R26
00032b 9508      	RET
                 
                 __SWAPD12:
00032c 2e18      	MOV  R1,R24
00032d 2f86      	MOV  R24,R22
00032e 2d61      	MOV  R22,R1
00032f 2e19      	MOV  R1,R25
000330 2f97      	MOV  R25,R23
000331 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000332 2e1b      	MOV  R1,R27
000333 2fbf      	MOV  R27,R31
000334 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000335 2e1a      	MOV  R1,R26
000336 2fae      	MOV  R26,R30
000337 2de1      	MOV  R30,R1
000338 9508      	RET
                 
                 __ANEGF1:
000339 9730      	SBIW R30,0
00033a 4060      	SBCI R22,0
00033b 4070      	SBCI R23,0
00033c f009      	BREQ __ANEGF10
00033d 5870      	SUBI R23,0x80
                 __ANEGF10:
00033e 9508      	RET
                 
                 __ROUND_REPACK:
00033f 2355      	TST  R21
000340 f442      	BRPL __REPACK
000341 3850      	CPI  R21,0x80
000342 f411      	BRNE __ROUND_REPACK0
000343 ffe0      	SBRS R30,0
000344 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000345 9631      	ADIW R30,1
000346 1f69      	ADC  R22,R25
000347 1f79      	ADC  R23,R25
000348 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000349 e850      	LDI  R21,0x80
00034a 2757      	EOR  R21,R23
00034b f411      	BRNE __REPACK0
00034c 935f      	PUSH R21
00034d c0cf      	RJMP __ZERORES
                 __REPACK0:
00034e 3f5f      	CPI  R21,0xFF
00034f f031      	BREQ __REPACK1
000350 0f66      	LSL  R22
000351 0c00      	LSL  R0
000352 9557      	ROR  R21
000353 9567      	ROR  R22
000354 2f75      	MOV  R23,R21
000355 9508      	RET
                 __REPACK1:
000356 935f      	PUSH R21
000357 2000      	TST  R0
000358 f00a      	BRMI __REPACK2
000359 c0ce      	RJMP __MAXRES
                 __REPACK2:
00035a c0c7      	RJMP __MINRES
                 
                 __UNPACK:
00035b e850      	LDI  R21,0x80
00035c 2e19      	MOV  R1,R25
00035d 2215      	AND  R1,R21
00035e 0f88      	LSL  R24
00035f 1f99      	ROL  R25
000360 2795      	EOR  R25,R21
000361 0f55      	LSL  R21
000362 9587      	ROR  R24
                 
                 __UNPACK1:
000363 e850      	LDI  R21,0x80
000364 2e07      	MOV  R0,R23
000365 2205      	AND  R0,R21
000366 0f66      	LSL  R22
000367 1f77      	ROL  R23
000368 2775      	EOR  R23,R21
000369 0f55      	LSL  R21
00036a 9567      	ROR  R22
00036b 9508      	RET
                 
                 __CFD1U:
00036c 9468      	SET
00036d c001      	RJMP __CFD1U0
                 __CFD1:
00036e 94e8      	CLT
                 __CFD1U0:
00036f 935f      	PUSH R21
000370 dff2      	RCALL __UNPACK1
000371 3870      	CPI  R23,0x80
000372 f018      	BRLO __CFD10
000373 3f7f      	CPI  R23,0xFF
000374 f408      	BRCC __CFD10
000375 c0a7      	RJMP __ZERORES
                 __CFD10:
000376 e156      	LDI  R21,22
000377 1b57      	SUB  R21,R23
000378 f4aa      	BRPL __CFD11
000379 9551      	NEG  R21
00037a 3058      	CPI  R21,8
00037b f40e      	BRTC __CFD19
00037c 3059      	CPI  R21,9
                 __CFD19:
00037d f030      	BRLO __CFD17
00037e efef      	SER  R30
00037f efff      	SER  R31
000380 ef6f      	SER  R22
000381 e77f      	LDI  R23,0x7F
000382 f977      	BLD  R23,7
000383 c01a      	RJMP __CFD15
                 __CFD17:
000384 2777      	CLR  R23
000385 2355      	TST  R21
000386 f0b9      	BREQ __CFD15
                 __CFD18:
000387 0fee      	LSL  R30
000388 1fff      	ROL  R31
000389 1f66      	ROL  R22
00038a 1f77      	ROL  R23
00038b 955a      	DEC  R21
00038c f7d1      	BRNE __CFD18
00038d c010      	RJMP __CFD15
                 __CFD11:
00038e 2777      	CLR  R23
                 __CFD12:
00038f 3058      	CPI  R21,8
000390 f028      	BRLO __CFD13
000391 2fef      	MOV  R30,R31
000392 2ff6      	MOV  R31,R22
000393 2f67      	MOV  R22,R23
000394 5058      	SUBI R21,8
000395 cff9      	RJMP __CFD12
                 __CFD13:
000396 2355      	TST  R21
000397 f031      	BREQ __CFD15
                 __CFD14:
000398 9576      	LSR  R23
000399 9567      	ROR  R22
00039a 95f7      	ROR  R31
00039b 95e7      	ROR  R30
00039c 955a      	DEC  R21
00039d f7d1      	BRNE __CFD14
                 __CFD15:
00039e 2000      	TST  R0
00039f f40a      	BRPL __CFD16
0003a0 df65      	RCALL __ANEGD1
                 __CFD16:
0003a1 915f      	POP  R21
0003a2 9508      	RET
                 
                 __CDF1U:
0003a3 9468      	SET
0003a4 c001      	RJMP __CDF1U0
                 __CDF1:
0003a5 94e8      	CLT
                 __CDF1U0:
0003a6 9730      	SBIW R30,0
0003a7 4060      	SBCI R22,0
0003a8 4070      	SBCI R23,0
0003a9 f0b1      	BREQ __CDF10
0003aa 2400      	CLR  R0
0003ab f026      	BRTS __CDF11
0003ac 2377      	TST  R23
0003ad f412      	BRPL __CDF11
0003ae 9400      	COM  R0
0003af df56      	RCALL __ANEGD1
                 __CDF11:
0003b0 2e17      	MOV  R1,R23
0003b1 e17e      	LDI  R23,30
0003b2 2011      	TST  R1
                 __CDF12:
0003b3 f032      	BRMI __CDF13
0003b4 957a      	DEC  R23
0003b5 0fee      	LSL  R30
0003b6 1fff      	ROL  R31
0003b7 1f66      	ROL  R22
0003b8 1c11      	ROL  R1
0003b9 cff9      	RJMP __CDF12
                 __CDF13:
0003ba 2fef      	MOV  R30,R31
0003bb 2ff6      	MOV  R31,R22
0003bc 2d61      	MOV  R22,R1
0003bd 935f      	PUSH R21
0003be df8a      	RCALL __REPACK
0003bf 915f      	POP  R21
                 __CDF10:
0003c0 9508      	RET
                 
                 __SWAPACC:
0003c1 934f      	PUSH R20
0003c2 01af      	MOVW R20,R30
0003c3 01fd      	MOVW R30,R26
0003c4 01da      	MOVW R26,R20
0003c5 01ab      	MOVW R20,R22
0003c6 01bc      	MOVW R22,R24
0003c7 01ca      	MOVW R24,R20
0003c8 2d40      	MOV  R20,R0
0003c9 2c01      	MOV  R0,R1
0003ca 2e14      	MOV  R1,R20
0003cb 914f      	POP  R20
0003cc 9508      	RET
                 
                 __UADD12:
0003cd 0fea      	ADD  R30,R26
0003ce 1ffb      	ADC  R31,R27
0003cf 1f68      	ADC  R22,R24
0003d0 9508      	RET
                 
                 __NEGMAN1:
0003d1 95e0      	COM  R30
0003d2 95f0      	COM  R31
0003d3 9560      	COM  R22
0003d4 5fef      	SUBI R30,-1
0003d5 4fff      	SBCI R31,-1
0003d6 4f6f      	SBCI R22,-1
0003d7 9508      	RET
                 
                 __SUBF12:
0003d8 935f      	PUSH R21
0003d9 df81      	RCALL __UNPACK
0003da 3890      	CPI  R25,0x80
0003db f171      	BREQ __ADDF129
0003dc e850      	LDI  R21,0x80
0003dd 2615      	EOR  R1,R21
                 
0003de c004      	RJMP __ADDF120
                 
                 __ADDF12:
0003df 935f      	PUSH R21
0003e0 df7a      	RCALL __UNPACK
0003e1 3890      	CPI  R25,0x80
0003e2 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0003e3 3870      	CPI  R23,0x80
0003e4 f121      	BREQ __ADDF128
                 __ADDF121:
0003e5 2f57      	MOV  R21,R23
0003e6 1b59      	SUB  R21,R25
0003e7 f12b      	BRVS __ADDF1211
0003e8 f412      	BRPL __ADDF122
0003e9 dfd7      	RCALL __SWAPACC
0003ea cffa      	RJMP __ADDF121
                 __ADDF122:
0003eb 3158      	CPI  R21,24
0003ec f018      	BRLO __ADDF123
0003ed 27aa      	CLR  R26
0003ee 27bb      	CLR  R27
0003ef 2788      	CLR  R24
                 __ADDF123:
0003f0 3058      	CPI  R21,8
0003f1 f028      	BRLO __ADDF124
0003f2 2fab      	MOV  R26,R27
0003f3 2fb8      	MOV  R27,R24
0003f4 2788      	CLR  R24
0003f5 5058      	SUBI R21,8
0003f6 cff9      	RJMP __ADDF123
                 __ADDF124:
0003f7 2355      	TST  R21
0003f8 f029      	BREQ __ADDF126
                 __ADDF125:
0003f9 9586      	LSR  R24
0003fa 95b7      	ROR  R27
0003fb 95a7      	ROR  R26
0003fc 955a      	DEC  R21
0003fd f7d9      	BRNE __ADDF125
                 __ADDF126:
0003fe 2d50      	MOV  R21,R0
0003ff 2551      	EOR  R21,R1
000400 f072      	BRMI __ADDF127
000401 dfcb      	RCALL __UADD12
000402 f438      	BRCC __ADDF129
000403 9567      	ROR  R22
000404 95f7      	ROR  R31
000405 95e7      	ROR  R30
000406 9573      	INC  R23
000407 f413      	BRVC __ADDF129
000408 c01f      	RJMP __MAXRES
                 __ADDF128:
000409 dfb7      	RCALL __SWAPACC
                 __ADDF129:
00040a df3e      	RCALL __REPACK
00040b 915f      	POP  R21
00040c 9508      	RET
                 __ADDF1211:
00040d f7d8      	BRCC __ADDF128
00040e cffb      	RJMP __ADDF129
                 __ADDF127:
00040f 1bea      	SUB  R30,R26
000410 0bfb      	SBC  R31,R27
000411 0b68      	SBC  R22,R24
000412 f051      	BREQ __ZERORES
000413 f410      	BRCC __ADDF1210
000414 9400      	COM  R0
000415 dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000416 2366      	TST  R22
000417 f392      	BRMI __ADDF129
000418 0fee      	LSL  R30
000419 1fff      	ROL  R31
00041a 1f66      	ROL  R22
00041b 957a      	DEC  R23
00041c f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
00041d 27ee      	CLR  R30
00041e 27ff      	CLR  R31
00041f 01bf      	MOVW R22,R30
000420 915f      	POP  R21
000421 9508      	RET
                 
                 __MINRES:
000422 efef      	SER  R30
000423 efff      	SER  R31
000424 e76f      	LDI  R22,0x7F
000425 ef7f      	SER  R23
000426 915f      	POP  R21
000427 9508      	RET
                 
                 __MAXRES:
000428 efef      	SER  R30
000429 efff      	SER  R31
00042a e76f      	LDI  R22,0x7F
00042b e77f      	LDI  R23,0x7F
00042c 915f      	POP  R21
00042d 9508      	RET
                 
                 __MULF12:
00042e 935f      	PUSH R21
00042f df2b      	RCALL __UNPACK
000430 3870      	CPI  R23,0x80
000431 f359      	BREQ __ZERORES
000432 3890      	CPI  R25,0x80
000433 f349      	BREQ __ZERORES
000434 2401      	EOR  R0,R1
000435 9408      	SEC
000436 1f79      	ADC  R23,R25
000437 f423      	BRVC __MULF124
000438 f324      	BRLT __ZERORES
                 __MULF125:
000439 2000      	TST  R0
00043a f33a      	BRMI __MINRES
00043b cfec      	RJMP __MAXRES
                 __MULF124:
00043c 920f      	PUSH R0
00043d 931f      	PUSH R17
00043e 932f      	PUSH R18
00043f 933f      	PUSH R19
000440 934f      	PUSH R20
000441 2711      	CLR  R17
000442 2722      	CLR  R18
000443 2799      	CLR  R25
000444 9f68      	MUL  R22,R24
000445 01a0      	MOVW R20,R0
000446 9f8f      	MUL  R24,R31
000447 2d30      	MOV  R19,R0
000448 0d41      	ADD  R20,R1
000449 1f59      	ADC  R21,R25
00044a 9f6b      	MUL  R22,R27
00044b 0d30      	ADD  R19,R0
00044c 1d41      	ADC  R20,R1
00044d 1f59      	ADC  R21,R25
00044e 9f8e      	MUL  R24,R30
00044f d027      	RCALL __MULF126
000450 9fbf      	MUL  R27,R31
000451 d025      	RCALL __MULF126
000452 9f6a      	MUL  R22,R26
000453 d023      	RCALL __MULF126
000454 9fbe      	MUL  R27,R30
000455 d01d      	RCALL __MULF127
000456 9faf      	MUL  R26,R31
000457 d01b      	RCALL __MULF127
000458 9fae      	MUL  R26,R30
000459 0d11      	ADD  R17,R1
00045a 1f29      	ADC  R18,R25
00045b 1f39      	ADC  R19,R25
00045c 1f49      	ADC  R20,R25
00045d 1f59      	ADC  R21,R25
00045e 2fe3      	MOV  R30,R19
00045f 2ff4      	MOV  R31,R20
000460 2f65      	MOV  R22,R21
000461 2f52      	MOV  R21,R18
000462 914f      	POP  R20
000463 913f      	POP  R19
000464 912f      	POP  R18
000465 911f      	POP  R17
000466 900f      	POP  R0
000467 2366      	TST  R22
000468 f02a      	BRMI __MULF122
000469 0f55      	LSL  R21
00046a 1fee      	ROL  R30
00046b 1fff      	ROL  R31
00046c 1f66      	ROL  R22
00046d c002      	RJMP __MULF123
                 __MULF122:
00046e 9573      	INC  R23
00046f f24b      	BRVS __MULF125
                 __MULF123:
000470 dece      	RCALL __ROUND_REPACK
000471 915f      	POP  R21
000472 9508      	RET
                 
                 __MULF127:
000473 0d10      	ADD  R17,R0
000474 1d21      	ADC  R18,R1
000475 1f39      	ADC  R19,R25
000476 c002      	RJMP __MULF128
                 __MULF126:
000477 0d20      	ADD  R18,R0
000478 1d31      	ADC  R19,R1
                 __MULF128:
000479 1f49      	ADC  R20,R25
00047a 1f59      	ADC  R21,R25
00047b 9508      	RET
                 
                 __DIVF21:
00047c 935f      	PUSH R21
00047d dedd      	RCALL __UNPACK
00047e 3870      	CPI  R23,0x80
00047f f421      	BRNE __DIVF210
000480 2011      	TST  R1
                 __DIVF211:
000481 f40a      	BRPL __DIVF219
000482 cf9f      	RJMP __MINRES
                 __DIVF219:
000483 cfa4      	RJMP __MAXRES
                 __DIVF210:
000484 3890      	CPI  R25,0x80
000485 f409      	BRNE __DIVF218
                 __DIVF217:
000486 cf96      	RJMP __ZERORES
                 __DIVF218:
000487 2401      	EOR  R0,R1
000488 9408      	SEC
000489 0b97      	SBC  R25,R23
00048a f41b      	BRVC __DIVF216
00048b f3d4      	BRLT __DIVF217
00048c 2000      	TST  R0
00048d cff3      	RJMP __DIVF211
                 __DIVF216:
00048e 2f79      	MOV  R23,R25
00048f 931f      	PUSH R17
000490 932f      	PUSH R18
000491 933f      	PUSH R19
000492 934f      	PUSH R20
000493 2411      	CLR  R1
000494 2711      	CLR  R17
000495 2722      	CLR  R18
000496 2733      	CLR  R19
000497 01a9      	MOVW R20,R18
000498 e290      	LDI  R25,32
                 __DIVF212:
000499 17ae      	CP   R26,R30
00049a 07bf      	CPC  R27,R31
00049b 0786      	CPC  R24,R22
00049c 0741      	CPC  R20,R17
00049d f030      	BRLO __DIVF213
00049e 1bae      	SUB  R26,R30
00049f 0bbf      	SBC  R27,R31
0004a0 0b86      	SBC  R24,R22
0004a1 0b41      	SBC  R20,R17
0004a2 9408      	SEC
0004a3 c001      	RJMP __DIVF214
                 __DIVF213:
0004a4 9488      	CLC
                 __DIVF214:
0004a5 1f55      	ROL  R21
0004a6 1f22      	ROL  R18
0004a7 1f33      	ROL  R19
0004a8 1c11      	ROL  R1
0004a9 1faa      	ROL  R26
0004aa 1fbb      	ROL  R27
0004ab 1f88      	ROL  R24
0004ac 1f44      	ROL  R20
0004ad 959a      	DEC  R25
0004ae f751      	BRNE __DIVF212
0004af 01f9      	MOVW R30,R18
0004b0 2d61      	MOV  R22,R1
0004b1 914f      	POP  R20
0004b2 913f      	POP  R19
0004b3 912f      	POP  R18
0004b4 911f      	POP  R17
0004b5 2366      	TST  R22
0004b6 f032      	BRMI __DIVF215
0004b7 0f55      	LSL  R21
0004b8 1fee      	ROL  R30
0004b9 1fff      	ROL  R31
0004ba 1f66      	ROL  R22
0004bb 957a      	DEC  R23
0004bc f24b      	BRVS __DIVF217
                 __DIVF215:
0004bd de81      	RCALL __ROUND_REPACK
0004be 915f      	POP  R21
0004bf 9508      	RET
                 
                 __CMPF12:
0004c0 2399      	TST  R25
0004c1 f09a      	BRMI __CMPF120
0004c2 2377      	TST  R23
0004c3 f042      	BRMI __CMPF121
0004c4 1797      	CP   R25,R23
0004c5 f048      	BRLO __CMPF122
0004c6 f429      	BRNE __CMPF121
0004c7 17ae      	CP   R26,R30
0004c8 07bf      	CPC  R27,R31
0004c9 0786      	CPC  R24,R22
0004ca f020      	BRLO __CMPF122
0004cb f031      	BREQ __CMPF123
                 __CMPF121:
0004cc 9498      	CLZ
0004cd 9488      	CLC
0004ce 9508      	RET
                 __CMPF122:
0004cf 9498      	CLZ
0004d0 9408      	SEC
0004d1 9508      	RET
                 __CMPF123:
0004d2 9418      	SEZ
0004d3 9488      	CLC
0004d4 9508      	RET
                 __CMPF120:
0004d5 2377      	TST  R23
0004d6 f7c2      	BRPL __CMPF122
0004d7 1797      	CP   R25,R23
0004d8 f398      	BRLO __CMPF121
0004d9 f7a9      	BRNE __CMPF122
0004da 17ea      	CP   R30,R26
0004db 07fb      	CPC  R31,R27
0004dc 0768      	CPC  R22,R24
0004dd f388      	BRLO __CMPF122
0004de f399      	BREQ __CMPF123
0004df cfec      	RJMP __CMPF121
                 
                 _delay_ms:
0004e0 9610      	adiw r26,0
0004e1 f039      	breq __delay_ms1
                 __delay_ms0:
0004e2 95a8      	wdr
                +
0004e3 ed80     +LDI R24 , LOW ( 0x7D0 )
0004e4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0004e5 9701     +SBIW R24 , 1
0004e6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0004e7 9711      	sbiw r26,1
0004e8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004e9 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  31 r1 :  32 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :   1 r7 :   0 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  10 r17:  40 r18:  26 r19:  21 r20:  24 r21:  71 r22:  78 r23:  71 
r24:  59 r25:  53 r26:  91 r27:  49 r28:   6 r29:   1 r30: 199 r31:  65 
x  :  11 y  : 127 z  :   9 
Registers used: 27 out of 35 (77.1%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   8 
adiw  :   6 and   :   5 andi  :   0 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   1 break :   0 breq  :  24 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 
brlt  :   2 brmi  :   9 brne  :  26 brpl  :   8 brsh  :   1 brtc  :   2 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   2 cbi   :   9 
cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 clr   :  25 
cls   :   0 clt   :   3 clv   :   0 clz   :   2 com   :   8 cp    :   7 
cpc   :  12 cpi   :  29 cpse  :   0 dec   :  12 des   :   0 eor   :   7 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   4 ld    :  30 ldd   :  39 ldi   : 142 lds   :   8 lpm   :   8 
lsl   :  12 lsr   :   3 mov   :  64 movw  :  26 mul   :   9 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :   1 out   :  30 
pop   :  22 push  :  22 rcall : 142 ret   :  57 reti  :   1 rjmp  :  73 
rol   :  24 ror   :  15 sbc   :   7 sbci  :  12 sbi   :  15 sbic  :   0 
sbis  :   1 sbiw  :  10 sbr   :   2 sbrc  :   1 sbrs  :   5 sec   :   5 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   2 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :  56 std   :  14 
sts   :  18 sub   :   4 subi  :  15 swap  :   1 tst   :  19 wdr   :   1 

Instructions used: 76 out of 114 (66.7%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009d4   2440     76   2516    8192  30.7%
[.dseg] 0x000060 0x00019f      0     63     63    1024   6.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 10 warnings
